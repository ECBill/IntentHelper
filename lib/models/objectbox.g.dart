// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/event_entity.dart';
import '../models/event_relation_entity.dart';
import '../models/graph_models.dart';
import '../models/llm_config.dart';
import '../models/record_entity.dart';
import '../models/speaker_entity.dart';
import '../models/summary_entity.dart';
import '../models/todo_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3639386993797467251),
      name: 'LlmConfigEntity',
      lastPropertyId: const obx_int.IdUid(5, 701999258548053285),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7739286151285964786),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3765193460152227179),
            name: 'provider',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7278373418289004811),
            name: 'model',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5672948533657013582),
            name: 'apiKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 701999258548053285),
            name: 'baseUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6448829547085728513),
      name: 'RecordEntity',
      lastPropertyId: const obx_int.IdUid(6, 4585192549237271515),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3813377154501744825),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5714868844106961341),
            name: 'role',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7256726488811853882),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1149880368058187568),
            name: 'category',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(1, 4998011467551157648)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3401953113599162706),
            name: 'vector',
            type: 28,
            flags: 8,
            indexId: const obx_int.IdUid(2, 4411872618098855321),
            hnswParams: obx_int.ModelHnswParams(
              dimensions: 1536,
              distanceType: 2,
            )),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4585192549237271515),
            name: 'createdAt',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(3, 4189536407566111915))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1735529651134350639),
      name: 'SpeakerEntity',
      lastPropertyId: const obx_int.IdUid(5, 8769346313747003705),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5569633206374227670),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7345673300178180752),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3890781300892091993),
            name: 'model',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7222509341564807328),
            name: 'embedding',
            type: 28,
            flags: 8,
            indexId: const obx_int.IdUid(4, 8759331971120747696),
            hnswParams: obx_int.ModelHnswParams(
              dimensions: 192,
              distanceType: 2,
            )),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8769346313747003705),
            name: 'createdAt',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4416477489622853758),
      name: 'SummaryEntity',
      lastPropertyId: const obx_int.IdUid(10, 2923590649816827150),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4030519740997150412),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3079897567194454884),
            name: 'subject',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8642453843016894586),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2795835402707276050),
            name: 'vector',
            type: 28,
            flags: 8,
            indexId: const obx_int.IdUid(5, 3246225434025514792),
            hnswParams: obx_int.ModelHnswParams(
              dimensions: 1536,
              distanceType: 2,
            )),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2045032190222721588),
            name: 'startTime',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(6, 1193253382977138933)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 427301010026080185),
            name: 'endTime',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(7, 7345308704392703)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7792097393847604646),
            name: 'createdAt',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(8, 1013958804632554431)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7474347114100388453),
            name: 'isMeeting',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7909730472667675488),
            name: 'audioPath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2923590649816827150),
            name: 'title',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 6033791281029208454),
      name: 'TodoEntity',
      lastPropertyId: const obx_int.IdUid(8, 7700129863954245269),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4012163451917408469),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3068455424218506646),
            name: 'task',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 839588025429094326),
            name: 'detail',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3437900244997219620),
            name: 'vector',
            type: 28,
            flags: 8,
            indexId: const obx_int.IdUid(9, 2672685320700963395),
            hnswParams: obx_int.ModelHnswParams(
              dimensions: 1536,
              distanceType: 2,
            )),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3549650884794842485),
            name: 'statusIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4079455490760423206),
            name: 'deadline',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(10, 2876654507844306934)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5062046738980920197),
            name: 'clock',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7700129863954245269),
            name: 'createdAt',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(11, 5204193897549032489))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 6584993956296997080),
      name: 'EventEntity',
      lastPropertyId: const obx_int.IdUid(10, 3067188203151806278),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8449012990489145271),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2951769368718377163),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5353399987313060860),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5148521798306805675),
            name: 'location',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2115882729702441165),
            name: 'participants',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6304904038864144578),
            name: 'timestamp',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 564275464232456764),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 999312653439946377),
            name: 'vector',
            type: 28,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8149456136454473757),
            name: 'createdAt',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3067188203151806278),
            name: 'summaryId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 8544682746862488186),
      name: 'EventRelationEntity',
      lastPropertyId: const obx_int.IdUid(7, 920133908091090570),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3357773151250746426),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7880948117404320191),
            name: 'sourceEventId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2261960690607926345),
            name: 'targetEventId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1960359416969679352),
            name: 'relationType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 568792060115478013),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 599919880921522646),
            name: 'confidence',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 920133908091090570),
            name: 'createdAt',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 5160658936453162190),
      name: 'Attribute',
      lastPropertyId: const obx_int.IdUid(7, 7638736480589356268),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3189110679761208986),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 618750524474373657),
            name: 'nodeId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5999648160653133843),
            name: 'key',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9017432265629220360),
            name: 'value',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6472014046257684525),
            name: 'timestamp',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5213066320880571025),
            name: 'context',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7638736480589356268),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 6098432721039701397),
      name: 'Context',
      lastPropertyId: const obx_int.IdUid(5, 6004494276210774226),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7064628391017383275),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8352373475865372257),
            name: 'cid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6962020949265575184),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6156946254628403332),
            name: 'timestamp',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6004494276210774226),
            name: 'sourceText',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 5251477228624044292),
      name: 'Edge',
      lastPropertyId: const obx_int.IdUid(9, 800984086675071422),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4853617128020147790),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6209318382611834168),
            name: 'source',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6941061594487173283),
            name: 'relation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5664768366618341746),
            name: 'target',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 357949892761901320),
            name: 'context',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5332698215552110956),
            name: 'timestamp',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 546245536805634873),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 340943392216242678),
            name: 'sourceContext',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 800984086675071422),
            name: 'confidence',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 3958473152149590383),
      name: 'Node',
      lastPropertyId: const obx_int.IdUid(10, 979814422374273084),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1126559969902334338),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8542825130556051134),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(12, 1613306649122174680)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 764419820792738104),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7226630253717407804),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6431245406455872551),
            name: 'attributesJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6967199601170263764),
            name: 'canonicalName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5527076242438638850),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3165083504290697149),
            name: 'sourceContext',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 673146459892066940),
            name: 'aliasesJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 979814422374273084),
            name: 'aliases',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 1512485180639659028),
      name: 'EntityAlignment',
      lastPropertyId: const obx_int.IdUid(7, 6710851810278955921),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5520576823515890648),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8379825383682658310),
            name: 'canonicalId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7508003411367301617),
            name: 'aliasId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3173466076144392623),
            name: 'alignmentType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1394502901613472671),
            name: 'confidence',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6271916194985475134),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6710851810278955921),
            name: 'sourceContext',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 9205112891195779515),
      name: 'EventEntityRelation',
      lastPropertyId: const obx_int.IdUid(6, 8002782670297001618),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7184005680401832851),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6151550587798331815),
            name: 'eventId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2265665795717610897),
            name: 'entityId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 680577964184191430),
            name: 'role',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4220811307359381272),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8002782670297001618),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 5846656904559202287),
      name: 'EventNode',
      lastPropertyId: const obx_int.IdUid(12, 1062563719176946852),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2407673535706238363),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1084225367109824866),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(13, 930329328396835669)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6761070788532377698),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6441823734006488059),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8537106087534978773),
            name: 'startTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5598527933482384852),
            name: 'endTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4440995354655928179),
            name: 'location',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7784613453953897831),
            name: 'purpose',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3208854710532543179),
            name: 'result',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4389902135877713651),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 674965243315869688),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1062563719176946852),
            name: 'sourceContext',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(15, 4105732853769386625),
      name: 'EventRelation',
      lastPropertyId: const obx_int.IdUid(6, 6889691014386926801),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6184793367628222740),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6661789770736835427),
            name: 'sourceEventId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8498848394401703993),
            name: 'targetEventId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4063072486710872004),
            name: 'relationType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8384536404037980911),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6889691014386926801),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(15, 4105732853769386625),
      lastIndexId: const obx_int.IdUid(13, 930329328396835669),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    LlmConfigEntity: obx_int.EntityDefinition<LlmConfigEntity>(
        model: _entities[0],
        toOneRelations: (LlmConfigEntity object) => [],
        toManyRelations: (LlmConfigEntity object) => {},
        getId: (LlmConfigEntity object) => object.id,
        setId: (LlmConfigEntity object, int id) {
          object.id = id;
        },
        objectToFB: (LlmConfigEntity object, fb.Builder fbb) {
          final providerOffset = object.provider == null
              ? null
              : fbb.writeString(object.provider!);
          final modelOffset =
              object.model == null ? null : fbb.writeString(object.model!);
          final apiKeyOffset =
              object.apiKey == null ? null : fbb.writeString(object.apiKey!);
          final baseUrlOffset =
              object.baseUrl == null ? null : fbb.writeString(object.baseUrl!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, providerOffset);
          fbb.addOffset(2, modelOffset);
          fbb.addOffset(3, apiKeyOffset);
          fbb.addOffset(4, baseUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final providerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final modelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final apiKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final baseUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = LlmConfigEntity(
              id: idParam,
              provider: providerParam,
              model: modelParam,
              apiKey: apiKeyParam,
              baseUrl: baseUrlParam);

          return object;
        }),
    RecordEntity: obx_int.EntityDefinition<RecordEntity>(
        model: _entities[1],
        toOneRelations: (RecordEntity object) => [],
        toManyRelations: (RecordEntity object) => {},
        getId: (RecordEntity object) => object.id,
        setId: (RecordEntity object, int id) {
          object.id = id;
        },
        objectToFB: (RecordEntity object, fb.Builder fbb) {
          final roleOffset =
              object.role == null ? null : fbb.writeString(object.role!);
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final vectorOffset = object.vector == null
              ? null
              : fbb.writeListFloat32(object.vector!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, roleOffset);
          fbb.addOffset(2, contentOffset);
          fbb.addOffset(3, categoryOffset);
          fbb.addOffset(4, vectorOffset);
          fbb.addInt64(5, object.createdAt);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final vectorParam =
              const fb.ListReader<double>(fb.Float32Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final createdAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = RecordEntity(
              id: idParam,
              role: roleParam,
              content: contentParam,
              category: categoryParam,
              vector: vectorParam,
              createdAt: createdAtParam);

          return object;
        }),
    SpeakerEntity: obx_int.EntityDefinition<SpeakerEntity>(
        model: _entities[2],
        toOneRelations: (SpeakerEntity object) => [],
        toManyRelations: (SpeakerEntity object) => {},
        getId: (SpeakerEntity object) => object.id,
        setId: (SpeakerEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SpeakerEntity object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final modelOffset =
              object.model == null ? null : fbb.writeString(object.model!);
          final embeddingOffset = object.embedding == null
              ? null
              : fbb.writeListFloat32(object.embedding!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, modelOffset);
          fbb.addOffset(3, embeddingOffset);
          fbb.addInt64(4, object.createdAt);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final modelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final embeddingParam =
              const fb.ListReader<double>(fb.Float32Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final createdAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = SpeakerEntity(
              id: idParam,
              name: nameParam,
              model: modelParam,
              embedding: embeddingParam,
              createdAt: createdAtParam);

          return object;
        }),
    SummaryEntity: obx_int.EntityDefinition<SummaryEntity>(
        model: _entities[3],
        toOneRelations: (SummaryEntity object) => [],
        toManyRelations: (SummaryEntity object) => {},
        getId: (SummaryEntity object) => object.id,
        setId: (SummaryEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SummaryEntity object, fb.Builder fbb) {
          final subjectOffset =
              object.subject == null ? null : fbb.writeString(object.subject!);
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          final vectorOffset = object.vector == null
              ? null
              : fbb.writeListFloat32(object.vector!);
          final audioPathOffset = object.audioPath == null
              ? null
              : fbb.writeString(object.audioPath!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, subjectOffset);
          fbb.addOffset(2, contentOffset);
          fbb.addOffset(3, vectorOffset);
          fbb.addInt64(4, object.startTime);
          fbb.addInt64(5, object.endTime);
          fbb.addInt64(6, object.createdAt);
          fbb.addBool(7, object.isMeeting);
          fbb.addOffset(8, audioPathOffset);
          fbb.addOffset(9, titleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final isMeetingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final subjectParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final vectorParam =
              const fb.ListReader<double>(fb.Float32Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final startTimeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final endTimeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final createdAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final audioPathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final object = SummaryEntity(
              id: idParam,
              isMeeting: isMeetingParam,
              subject: subjectParam,
              content: contentParam,
              vector: vectorParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              createdAt: createdAtParam,
              audioPath: audioPathParam,
              title: titleParam);

          return object;
        }),
    TodoEntity: obx_int.EntityDefinition<TodoEntity>(
        model: _entities[4],
        toOneRelations: (TodoEntity object) => [],
        toManyRelations: (TodoEntity object) => {},
        getId: (TodoEntity object) => object.id,
        setId: (TodoEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TodoEntity object, fb.Builder fbb) {
          final taskOffset =
              object.task == null ? null : fbb.writeString(object.task!);
          final detailOffset =
              object.detail == null ? null : fbb.writeString(object.detail!);
          final vectorOffset = object.vector == null
              ? null
              : fbb.writeListFloat32(object.vector!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, taskOffset);
          fbb.addOffset(2, detailOffset);
          fbb.addOffset(3, vectorOffset);
          fbb.addInt64(4, object.statusIndex);
          fbb.addInt64(5, object.deadline);
          fbb.addBool(6, object.clock);
          fbb.addInt64(7, object.createdAt);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final taskParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final detailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final vectorParam =
              const fb.ListReader<double>(fb.Float32Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final deadlineParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final clockParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final createdAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final object = TodoEntity(
              id: idParam,
              task: taskParam,
              detail: detailParam,
              vector: vectorParam,
              deadline: deadlineParam,
              clock: clockParam,
              createdAt: createdAtParam)
            ..statusIndex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);

          return object;
        }),
    EventEntity: obx_int.EntityDefinition<EventEntity>(
        model: _entities[5],
        toOneRelations: (EventEntity object) => [],
        toManyRelations: (EventEntity object) => {},
        getId: (EventEntity object) => object.id,
        setId: (EventEntity object, int id) {
          object.id = id;
        },
        objectToFB: (EventEntity object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final participantsOffset = object.participants == null
              ? null
              : fbb.writeString(object.participants!);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final vectorOffset = object.vector == null
              ? null
              : fbb.writeListFloat32(object.vector!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, locationOffset);
          fbb.addOffset(4, participantsOffset);
          fbb.addInt64(5, object.timestamp);
          fbb.addOffset(6, categoryOffset);
          fbb.addOffset(7, vectorOffset);
          fbb.addInt64(8, object.createdAt);
          fbb.addInt64(9, object.summaryId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final participantsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final timestampParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final vectorParam =
              const fb.ListReader<double>(fb.Float32Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final createdAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final summaryIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final object = EventEntity(
              title: titleParam,
              description: descriptionParam,
              location: locationParam,
              participants: participantsParam,
              timestamp: timestampParam,
              category: categoryParam,
              vector: vectorParam,
              createdAt: createdAtParam,
              summaryId: summaryIdParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    EventRelationEntity: obx_int.EntityDefinition<EventRelationEntity>(
        model: _entities[6],
        toOneRelations: (EventRelationEntity object) => [],
        toManyRelations: (EventRelationEntity object) => {},
        getId: (EventRelationEntity object) => object.id,
        setId: (EventRelationEntity object, int id) {
          object.id = id;
        },
        objectToFB: (EventRelationEntity object, fb.Builder fbb) {
          final relationTypeOffset = object.relationType == null
              ? null
              : fbb.writeString(object.relationType!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.sourceEventId);
          fbb.addInt64(2, object.targetEventId);
          fbb.addOffset(3, relationTypeOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addFloat64(5, object.confidence);
          fbb.addInt64(6, object.createdAt);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final sourceEventIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final targetEventIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final relationTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final confidenceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final createdAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final object = EventRelationEntity(
              sourceEventId: sourceEventIdParam,
              targetEventId: targetEventIdParam,
              relationType: relationTypeParam,
              description: descriptionParam,
              confidence: confidenceParam,
              createdAt: createdAtParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Attribute: obx_int.EntityDefinition<Attribute>(
        model: _entities[7],
        toOneRelations: (Attribute object) => [],
        toManyRelations: (Attribute object) => {},
        getId: (Attribute object) => object.obxId,
        setId: (Attribute object, int id) {
          object.obxId = id;
        },
        objectToFB: (Attribute object, fb.Builder fbb) {
          final nodeIdOffset = fbb.writeString(object.nodeId);
          final keyOffset = fbb.writeString(object.key);
          final valueOffset = fbb.writeString(object.value);
          final contextOffset =
              object.context == null ? null : fbb.writeString(object.context!);
          fbb.startTable(8);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, nodeIdOffset);
          fbb.addOffset(2, keyOffset);
          fbb.addOffset(3, valueOffset);
          fbb.addInt64(4, object.timestamp?.millisecondsSinceEpoch);
          fbb.addOffset(5, contextOffset);
          fbb.addInt64(6, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final timestampValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nodeIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final keyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final timestampParam = timestampValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(timestampValue);
          final contextParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final object = Attribute(
              obxId: obxIdParam,
              nodeId: nodeIdParam,
              key: keyParam,
              value: valueParam,
              timestamp: timestampParam,
              context: contextParam,
              lastUpdated: lastUpdatedParam);

          return object;
        }),
    Context: obx_int.EntityDefinition<Context>(
        model: _entities[8],
        toOneRelations: (Context object) => [],
        toManyRelations: (Context object) => {},
        getId: (Context object) => object.obxId,
        setId: (Context object, int id) {
          object.obxId = id;
        },
        objectToFB: (Context object, fb.Builder fbb) {
          final cidOffset = fbb.writeString(object.cid);
          final titleOffset = fbb.writeString(object.title);
          final sourceTextOffset = fbb.writeString(object.sourceText);
          fbb.startTable(6);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, cidOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addInt64(3, object.timestamp.millisecondsSinceEpoch);
          fbb.addOffset(4, sourceTextOffset);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final cidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final timestampParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final sourceTextParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Context(
              obxId: obxIdParam,
              cid: cidParam,
              title: titleParam,
              timestamp: timestampParam,
              sourceText: sourceTextParam);

          return object;
        }),
    Edge: obx_int.EntityDefinition<Edge>(
        model: _entities[9],
        toOneRelations: (Edge object) => [],
        toManyRelations: (Edge object) => {},
        getId: (Edge object) => object.obxId,
        setId: (Edge object, int id) {
          object.obxId = id;
        },
        objectToFB: (Edge object, fb.Builder fbb) {
          final sourceOffset = fbb.writeString(object.source);
          final relationOffset = fbb.writeString(object.relation);
          final targetOffset = fbb.writeString(object.target);
          final contextOffset =
              object.context == null ? null : fbb.writeString(object.context!);
          final sourceContextOffset = object.sourceContext == null
              ? null
              : fbb.writeString(object.sourceContext!);
          fbb.startTable(10);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, sourceOffset);
          fbb.addOffset(2, relationOffset);
          fbb.addOffset(3, targetOffset);
          fbb.addOffset(4, contextOffset);
          fbb.addInt64(5, object.timestamp?.millisecondsSinceEpoch);
          fbb.addInt64(6, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(7, sourceContextOffset);
          fbb.addFloat64(8, object.confidence);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final timestampValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final sourceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final relationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final targetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final contextParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final timestampParam = timestampValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(timestampValue);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final sourceContextParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final confidenceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final object = Edge(
              obxId: obxIdParam,
              source: sourceParam,
              relation: relationParam,
              target: targetParam,
              context: contextParam,
              timestamp: timestampParam,
              lastUpdated: lastUpdatedParam,
              sourceContext: sourceContextParam,
              confidence: confidenceParam);

          return object;
        }),
    Node: obx_int.EntityDefinition<Node>(
        model: _entities[10],
        toOneRelations: (Node object) => [],
        toManyRelations: (Node object) => {},
        getId: (Node object) => object.obxId,
        setId: (Node object, int id) {
          object.obxId = id;
        },
        objectToFB: (Node object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final attributesJsonOffset = fbb.writeString(object.attributesJson);
          final canonicalNameOffset = fbb.writeString(object.canonicalName);
          final sourceContextOffset = object.sourceContext == null
              ? null
              : fbb.writeString(object.sourceContext!);
          final aliasesJsonOffset = fbb.writeString(object.aliasesJson);
          final aliasesOffset = fbb.writeList(
              object.aliases.map(fbb.writeString).toList(growable: false));
          fbb.startTable(11);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addOffset(4, attributesJsonOffset);
          fbb.addOffset(5, canonicalNameOffset);
          fbb.addInt64(6, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(7, sourceContextOffset);
          fbb.addOffset(8, aliasesJsonOffset);
          fbb.addOffset(9, aliasesOffset);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final canonicalNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final sourceContextParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final aliasesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 22, []);
          final object = Node(
              obxId: obxIdParam,
              id: idParam,
              name: nameParam,
              type: typeParam,
              canonicalName: canonicalNameParam,
              lastUpdated: lastUpdatedParam,
              sourceContext: sourceContextParam,
              aliases: aliasesParam)
            ..attributesJson = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..aliasesJson = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '');

          return object;
        }),
    EntityAlignment: obx_int.EntityDefinition<EntityAlignment>(
        model: _entities[11],
        toOneRelations: (EntityAlignment object) => [],
        toManyRelations: (EntityAlignment object) => {},
        getId: (EntityAlignment object) => object.obxId,
        setId: (EntityAlignment object, int id) {
          object.obxId = id;
        },
        objectToFB: (EntityAlignment object, fb.Builder fbb) {
          final canonicalIdOffset = fbb.writeString(object.canonicalId);
          final aliasIdOffset = fbb.writeString(object.aliasId);
          final alignmentTypeOffset = fbb.writeString(object.alignmentType);
          final sourceContextOffset = object.sourceContext == null
              ? null
              : fbb.writeString(object.sourceContext!);
          fbb.startTable(8);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, canonicalIdOffset);
          fbb.addOffset(2, aliasIdOffset);
          fbb.addOffset(3, alignmentTypeOffset);
          fbb.addFloat64(4, object.confidence);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(6, sourceContextOffset);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final canonicalIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final aliasIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final alignmentTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final confidenceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final sourceContextParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final object = EntityAlignment(
              obxId: obxIdParam,
              canonicalId: canonicalIdParam,
              aliasId: aliasIdParam,
              alignmentType: alignmentTypeParam,
              confidence: confidenceParam,
              createdAt: createdAtParam,
              sourceContext: sourceContextParam);

          return object;
        }),
    EventEntityRelation: obx_int.EntityDefinition<EventEntityRelation>(
        model: _entities[12],
        toOneRelations: (EventEntityRelation object) => [],
        toManyRelations: (EventEntityRelation object) => {},
        getId: (EventEntityRelation object) => object.obxId,
        setId: (EventEntityRelation object, int id) {
          object.obxId = id;
        },
        objectToFB: (EventEntityRelation object, fb.Builder fbb) {
          final eventIdOffset = fbb.writeString(object.eventId);
          final entityIdOffset = fbb.writeString(object.entityId);
          final roleOffset = fbb.writeString(object.role);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(7);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, eventIdOffset);
          fbb.addOffset(2, entityIdOffset);
          fbb.addOffset(3, roleOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addInt64(5, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final eventIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final entityIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = EventEntityRelation(
              obxId: obxIdParam,
              eventId: eventIdParam,
              entityId: entityIdParam,
              role: roleParam,
              description: descriptionParam,
              lastUpdated: lastUpdatedParam);

          return object;
        }),
    EventNode: obx_int.EntityDefinition<EventNode>(
        model: _entities[13],
        toOneRelations: (EventNode object) => [],
        toManyRelations: (EventNode object) => {},
        getId: (EventNode object) => object.obxId,
        setId: (EventNode object, int id) {
          object.obxId = id;
        },
        objectToFB: (EventNode object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final purposeOffset =
              object.purpose == null ? null : fbb.writeString(object.purpose!);
          final resultOffset =
              object.result == null ? null : fbb.writeString(object.result!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final sourceContextOffset = object.sourceContext == null
              ? null
              : fbb.writeString(object.sourceContext!);
          fbb.startTable(13);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addInt64(4, object.startTime?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.endTime?.millisecondsSinceEpoch);
          fbb.addOffset(6, locationOffset);
          fbb.addOffset(7, purposeOffset);
          fbb.addOffset(8, resultOffset);
          fbb.addOffset(9, descriptionOffset);
          fbb.addInt64(10, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(11, sourceContextOffset);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final startTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final startTimeParam = startTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(startTimeValue);
          final endTimeParam = endTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(endTimeValue);
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final purposeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final resultParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));
          final sourceContextParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final object = EventNode(
              obxId: obxIdParam,
              id: idParam,
              name: nameParam,
              type: typeParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              location: locationParam,
              purpose: purposeParam,
              result: resultParam,
              description: descriptionParam,
              lastUpdated: lastUpdatedParam,
              sourceContext: sourceContextParam);

          return object;
        }),
    EventRelation: obx_int.EntityDefinition<EventRelation>(
        model: _entities[14],
        toOneRelations: (EventRelation object) => [],
        toManyRelations: (EventRelation object) => {},
        getId: (EventRelation object) => object.obxId,
        setId: (EventRelation object, int id) {
          object.obxId = id;
        },
        objectToFB: (EventRelation object, fb.Builder fbb) {
          final sourceEventIdOffset = fbb.writeString(object.sourceEventId);
          final targetEventIdOffset = fbb.writeString(object.targetEventId);
          final relationTypeOffset = fbb.writeString(object.relationType);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(7);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, sourceEventIdOffset);
          fbb.addOffset(2, targetEventIdOffset);
          fbb.addOffset(3, relationTypeOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addInt64(5, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final sourceEventIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final targetEventIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final relationTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = EventRelation(
              obxId: obxIdParam,
              sourceEventId: sourceEventIdParam,
              targetEventId: targetEventIdParam,
              relationType: relationTypeParam,
              description: descriptionParam,
              lastUpdated: lastUpdatedParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [LlmConfigEntity] entity fields to define ObjectBox queries.
class LlmConfigEntity_ {
  /// See [LlmConfigEntity.id].
  static final id =
      obx.QueryIntegerProperty<LlmConfigEntity>(_entities[0].properties[0]);

  /// See [LlmConfigEntity.provider].
  static final provider =
      obx.QueryStringProperty<LlmConfigEntity>(_entities[0].properties[1]);

  /// See [LlmConfigEntity.model].
  static final model =
      obx.QueryStringProperty<LlmConfigEntity>(_entities[0].properties[2]);

  /// See [LlmConfigEntity.apiKey].
  static final apiKey =
      obx.QueryStringProperty<LlmConfigEntity>(_entities[0].properties[3]);

  /// See [LlmConfigEntity.baseUrl].
  static final baseUrl =
      obx.QueryStringProperty<LlmConfigEntity>(_entities[0].properties[4]);
}

/// [RecordEntity] entity fields to define ObjectBox queries.
class RecordEntity_ {
  /// See [RecordEntity.id].
  static final id =
      obx.QueryIntegerProperty<RecordEntity>(_entities[1].properties[0]);

  /// See [RecordEntity.role].
  static final role =
      obx.QueryStringProperty<RecordEntity>(_entities[1].properties[1]);

  /// See [RecordEntity.content].
  static final content =
      obx.QueryStringProperty<RecordEntity>(_entities[1].properties[2]);

  /// See [RecordEntity.category].
  static final category =
      obx.QueryStringProperty<RecordEntity>(_entities[1].properties[3]);

  /// See [RecordEntity.vector].
  static final vector =
      obx.QueryHnswProperty<RecordEntity>(_entities[1].properties[4]);

  /// See [RecordEntity.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<RecordEntity>(_entities[1].properties[5]);
}

/// [SpeakerEntity] entity fields to define ObjectBox queries.
class SpeakerEntity_ {
  /// See [SpeakerEntity.id].
  static final id =
      obx.QueryIntegerProperty<SpeakerEntity>(_entities[2].properties[0]);

  /// See [SpeakerEntity.name].
  static final name =
      obx.QueryStringProperty<SpeakerEntity>(_entities[2].properties[1]);

  /// See [SpeakerEntity.model].
  static final model =
      obx.QueryStringProperty<SpeakerEntity>(_entities[2].properties[2]);

  /// See [SpeakerEntity.embedding].
  static final embedding =
      obx.QueryHnswProperty<SpeakerEntity>(_entities[2].properties[3]);

  /// See [SpeakerEntity.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<SpeakerEntity>(_entities[2].properties[4]);
}

/// [SummaryEntity] entity fields to define ObjectBox queries.
class SummaryEntity_ {
  /// See [SummaryEntity.id].
  static final id =
      obx.QueryIntegerProperty<SummaryEntity>(_entities[3].properties[0]);

  /// See [SummaryEntity.subject].
  static final subject =
      obx.QueryStringProperty<SummaryEntity>(_entities[3].properties[1]);

  /// See [SummaryEntity.content].
  static final content =
      obx.QueryStringProperty<SummaryEntity>(_entities[3].properties[2]);

  /// See [SummaryEntity.vector].
  static final vector =
      obx.QueryHnswProperty<SummaryEntity>(_entities[3].properties[3]);

  /// See [SummaryEntity.startTime].
  static final startTime =
      obx.QueryIntegerProperty<SummaryEntity>(_entities[3].properties[4]);

  /// See [SummaryEntity.endTime].
  static final endTime =
      obx.QueryIntegerProperty<SummaryEntity>(_entities[3].properties[5]);

  /// See [SummaryEntity.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<SummaryEntity>(_entities[3].properties[6]);

  /// See [SummaryEntity.isMeeting].
  static final isMeeting =
      obx.QueryBooleanProperty<SummaryEntity>(_entities[3].properties[7]);

  /// See [SummaryEntity.audioPath].
  static final audioPath =
      obx.QueryStringProperty<SummaryEntity>(_entities[3].properties[8]);

  /// See [SummaryEntity.title].
  static final title =
      obx.QueryStringProperty<SummaryEntity>(_entities[3].properties[9]);
}

/// [TodoEntity] entity fields to define ObjectBox queries.
class TodoEntity_ {
  /// See [TodoEntity.id].
  static final id =
      obx.QueryIntegerProperty<TodoEntity>(_entities[4].properties[0]);

  /// See [TodoEntity.task].
  static final task =
      obx.QueryStringProperty<TodoEntity>(_entities[4].properties[1]);

  /// See [TodoEntity.detail].
  static final detail =
      obx.QueryStringProperty<TodoEntity>(_entities[4].properties[2]);

  /// See [TodoEntity.vector].
  static final vector =
      obx.QueryHnswProperty<TodoEntity>(_entities[4].properties[3]);

  /// See [TodoEntity.statusIndex].
  static final statusIndex =
      obx.QueryIntegerProperty<TodoEntity>(_entities[4].properties[4]);

  /// See [TodoEntity.deadline].
  static final deadline =
      obx.QueryIntegerProperty<TodoEntity>(_entities[4].properties[5]);

  /// See [TodoEntity.clock].
  static final clock =
      obx.QueryBooleanProperty<TodoEntity>(_entities[4].properties[6]);

  /// See [TodoEntity.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<TodoEntity>(_entities[4].properties[7]);
}

/// [EventEntity] entity fields to define ObjectBox queries.
class EventEntity_ {
  /// See [EventEntity.id].
  static final id =
      obx.QueryIntegerProperty<EventEntity>(_entities[5].properties[0]);

  /// See [EventEntity.title].
  static final title =
      obx.QueryStringProperty<EventEntity>(_entities[5].properties[1]);

  /// See [EventEntity.description].
  static final description =
      obx.QueryStringProperty<EventEntity>(_entities[5].properties[2]);

  /// See [EventEntity.location].
  static final location =
      obx.QueryStringProperty<EventEntity>(_entities[5].properties[3]);

  /// See [EventEntity.participants].
  static final participants =
      obx.QueryStringProperty<EventEntity>(_entities[5].properties[4]);

  /// See [EventEntity.timestamp].
  static final timestamp =
      obx.QueryIntegerProperty<EventEntity>(_entities[5].properties[5]);

  /// See [EventEntity.category].
  static final category =
      obx.QueryStringProperty<EventEntity>(_entities[5].properties[6]);

  /// See [EventEntity.vector].
  static final vector =
      obx.QueryDoubleVectorProperty<EventEntity>(_entities[5].properties[7]);

  /// See [EventEntity.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<EventEntity>(_entities[5].properties[8]);

  /// See [EventEntity.summaryId].
  static final summaryId =
      obx.QueryIntegerProperty<EventEntity>(_entities[5].properties[9]);
}

/// [EventRelationEntity] entity fields to define ObjectBox queries.
class EventRelationEntity_ {
  /// See [EventRelationEntity.id].
  static final id =
      obx.QueryIntegerProperty<EventRelationEntity>(_entities[6].properties[0]);

  /// See [EventRelationEntity.sourceEventId].
  static final sourceEventId =
      obx.QueryIntegerProperty<EventRelationEntity>(_entities[6].properties[1]);

  /// See [EventRelationEntity.targetEventId].
  static final targetEventId =
      obx.QueryIntegerProperty<EventRelationEntity>(_entities[6].properties[2]);

  /// See [EventRelationEntity.relationType].
  static final relationType =
      obx.QueryStringProperty<EventRelationEntity>(_entities[6].properties[3]);

  /// See [EventRelationEntity.description].
  static final description =
      obx.QueryStringProperty<EventRelationEntity>(_entities[6].properties[4]);

  /// See [EventRelationEntity.confidence].
  static final confidence =
      obx.QueryDoubleProperty<EventRelationEntity>(_entities[6].properties[5]);

  /// See [EventRelationEntity.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<EventRelationEntity>(_entities[6].properties[6]);
}

/// [Attribute] entity fields to define ObjectBox queries.
class Attribute_ {
  /// See [Attribute.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Attribute>(_entities[7].properties[0]);

  /// See [Attribute.nodeId].
  static final nodeId =
      obx.QueryStringProperty<Attribute>(_entities[7].properties[1]);

  /// See [Attribute.key].
  static final key =
      obx.QueryStringProperty<Attribute>(_entities[7].properties[2]);

  /// See [Attribute.value].
  static final value =
      obx.QueryStringProperty<Attribute>(_entities[7].properties[3]);

  /// See [Attribute.timestamp].
  static final timestamp =
      obx.QueryDateProperty<Attribute>(_entities[7].properties[4]);

  /// See [Attribute.context].
  static final context =
      obx.QueryStringProperty<Attribute>(_entities[7].properties[5]);

  /// See [Attribute.lastUpdated].
  static final lastUpdated =
      obx.QueryDateProperty<Attribute>(_entities[7].properties[6]);
}

/// [Context] entity fields to define ObjectBox queries.
class Context_ {
  /// See [Context.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Context>(_entities[8].properties[0]);

  /// See [Context.cid].
  static final cid =
      obx.QueryStringProperty<Context>(_entities[8].properties[1]);

  /// See [Context.title].
  static final title =
      obx.QueryStringProperty<Context>(_entities[8].properties[2]);

  /// See [Context.timestamp].
  static final timestamp =
      obx.QueryDateProperty<Context>(_entities[8].properties[3]);

  /// See [Context.sourceText].
  static final sourceText =
      obx.QueryStringProperty<Context>(_entities[8].properties[4]);
}

/// [Edge] entity fields to define ObjectBox queries.
class Edge_ {
  /// See [Edge.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Edge>(_entities[9].properties[0]);

  /// See [Edge.source].
  static final source =
      obx.QueryStringProperty<Edge>(_entities[9].properties[1]);

  /// See [Edge.relation].
  static final relation =
      obx.QueryStringProperty<Edge>(_entities[9].properties[2]);

  /// See [Edge.target].
  static final target =
      obx.QueryStringProperty<Edge>(_entities[9].properties[3]);

  /// See [Edge.context].
  static final context =
      obx.QueryStringProperty<Edge>(_entities[9].properties[4]);

  /// See [Edge.timestamp].
  static final timestamp =
      obx.QueryDateProperty<Edge>(_entities[9].properties[5]);

  /// See [Edge.lastUpdated].
  static final lastUpdated =
      obx.QueryDateProperty<Edge>(_entities[9].properties[6]);

  /// See [Edge.sourceContext].
  static final sourceContext =
      obx.QueryStringProperty<Edge>(_entities[9].properties[7]);

  /// See [Edge.confidence].
  static final confidence =
      obx.QueryDoubleProperty<Edge>(_entities[9].properties[8]);
}

/// [Node] entity fields to define ObjectBox queries.
class Node_ {
  /// See [Node.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Node>(_entities[10].properties[0]);

  /// See [Node.id].
  static final id = obx.QueryStringProperty<Node>(_entities[10].properties[1]);

  /// See [Node.name].
  static final name =
      obx.QueryStringProperty<Node>(_entities[10].properties[2]);

  /// See [Node.type].
  static final type =
      obx.QueryStringProperty<Node>(_entities[10].properties[3]);

  /// See [Node.attributesJson].
  static final attributesJson =
      obx.QueryStringProperty<Node>(_entities[10].properties[4]);

  /// See [Node.canonicalName].
  static final canonicalName =
      obx.QueryStringProperty<Node>(_entities[10].properties[5]);

  /// See [Node.lastUpdated].
  static final lastUpdated =
      obx.QueryDateProperty<Node>(_entities[10].properties[6]);

  /// See [Node.sourceContext].
  static final sourceContext =
      obx.QueryStringProperty<Node>(_entities[10].properties[7]);

  /// See [Node.aliasesJson].
  static final aliasesJson =
      obx.QueryStringProperty<Node>(_entities[10].properties[8]);

  /// See [Node.aliases].
  static final aliases =
      obx.QueryStringVectorProperty<Node>(_entities[10].properties[9]);
}

/// [EntityAlignment] entity fields to define ObjectBox queries.
class EntityAlignment_ {
  /// See [EntityAlignment.obxId].
  static final obxId =
      obx.QueryIntegerProperty<EntityAlignment>(_entities[11].properties[0]);

  /// See [EntityAlignment.canonicalId].
  static final canonicalId =
      obx.QueryStringProperty<EntityAlignment>(_entities[11].properties[1]);

  /// See [EntityAlignment.aliasId].
  static final aliasId =
      obx.QueryStringProperty<EntityAlignment>(_entities[11].properties[2]);

  /// See [EntityAlignment.alignmentType].
  static final alignmentType =
      obx.QueryStringProperty<EntityAlignment>(_entities[11].properties[3]);

  /// See [EntityAlignment.confidence].
  static final confidence =
      obx.QueryDoubleProperty<EntityAlignment>(_entities[11].properties[4]);

  /// See [EntityAlignment.createdAt].
  static final createdAt =
      obx.QueryDateProperty<EntityAlignment>(_entities[11].properties[5]);

  /// See [EntityAlignment.sourceContext].
  static final sourceContext =
      obx.QueryStringProperty<EntityAlignment>(_entities[11].properties[6]);
}

/// [EventEntityRelation] entity fields to define ObjectBox queries.
class EventEntityRelation_ {
  /// See [EventEntityRelation.obxId].
  static final obxId = obx.QueryIntegerProperty<EventEntityRelation>(
      _entities[12].properties[0]);

  /// See [EventEntityRelation.eventId].
  static final eventId =
      obx.QueryStringProperty<EventEntityRelation>(_entities[12].properties[1]);

  /// See [EventEntityRelation.entityId].
  static final entityId =
      obx.QueryStringProperty<EventEntityRelation>(_entities[12].properties[2]);

  /// See [EventEntityRelation.role].
  static final role =
      obx.QueryStringProperty<EventEntityRelation>(_entities[12].properties[3]);

  /// See [EventEntityRelation.description].
  static final description =
      obx.QueryStringProperty<EventEntityRelation>(_entities[12].properties[4]);

  /// See [EventEntityRelation.lastUpdated].
  static final lastUpdated =
      obx.QueryDateProperty<EventEntityRelation>(_entities[12].properties[5]);
}

/// [EventNode] entity fields to define ObjectBox queries.
class EventNode_ {
  /// See [EventNode.obxId].
  static final obxId =
      obx.QueryIntegerProperty<EventNode>(_entities[13].properties[0]);

  /// See [EventNode.id].
  static final id =
      obx.QueryStringProperty<EventNode>(_entities[13].properties[1]);

  /// See [EventNode.name].
  static final name =
      obx.QueryStringProperty<EventNode>(_entities[13].properties[2]);

  /// See [EventNode.type].
  static final type =
      obx.QueryStringProperty<EventNode>(_entities[13].properties[3]);

  /// See [EventNode.startTime].
  static final startTime =
      obx.QueryDateProperty<EventNode>(_entities[13].properties[4]);

  /// See [EventNode.endTime].
  static final endTime =
      obx.QueryDateProperty<EventNode>(_entities[13].properties[5]);

  /// See [EventNode.location].
  static final location =
      obx.QueryStringProperty<EventNode>(_entities[13].properties[6]);

  /// See [EventNode.purpose].
  static final purpose =
      obx.QueryStringProperty<EventNode>(_entities[13].properties[7]);

  /// See [EventNode.result].
  static final result =
      obx.QueryStringProperty<EventNode>(_entities[13].properties[8]);

  /// See [EventNode.description].
  static final description =
      obx.QueryStringProperty<EventNode>(_entities[13].properties[9]);

  /// See [EventNode.lastUpdated].
  static final lastUpdated =
      obx.QueryDateProperty<EventNode>(_entities[13].properties[10]);

  /// See [EventNode.sourceContext].
  static final sourceContext =
      obx.QueryStringProperty<EventNode>(_entities[13].properties[11]);
}

/// [EventRelation] entity fields to define ObjectBox queries.
class EventRelation_ {
  /// See [EventRelation.obxId].
  static final obxId =
      obx.QueryIntegerProperty<EventRelation>(_entities[14].properties[0]);

  /// See [EventRelation.sourceEventId].
  static final sourceEventId =
      obx.QueryStringProperty<EventRelation>(_entities[14].properties[1]);

  /// See [EventRelation.targetEventId].
  static final targetEventId =
      obx.QueryStringProperty<EventRelation>(_entities[14].properties[2]);

  /// See [EventRelation.relationType].
  static final relationType =
      obx.QueryStringProperty<EventRelation>(_entities[14].properties[3]);

  /// See [EventRelation.description].
  static final description =
      obx.QueryStringProperty<EventRelation>(_entities[14].properties[4]);

  /// See [EventRelation.lastUpdated].
  static final lastUpdated =
      obx.QueryDateProperty<EventRelation>(_entities[14].properties[5]);
}
